<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CLS</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stephenchen.com/"/>
  <updated>2017-11-26T04:09:54.000Z</updated>
  <id>http://stephenchen.com/</id>
  
  <author>
    <name>Stephen Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Memory Usage Of Static And Non-static Methods</title>
    <link href="http://stephenchen.com/2017/11/25/Memory-of-static-and-non-static-methods/"/>
    <id>http://stephenchen.com/2017/11/25/Memory-of-static-and-non-static-methods/</id>
    <published>2017-11-25T14:24:55.000Z</published>
    <updated>2017-11-26T04:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>curious</p>
<a id="more"></a>
<p>I use static methods in lots of places, so I just<br>curious about the memory footprint between static and non-static methods or parameter.</p>
<p>According to <a href="https://stackoverflow.com/questions/8353842/static-methods-save-memory-unmanaged-code" target="_blank" rel="external">this</a>, non-static methods or parameters is almost same as static methods or parameters.</p>
<p>So be design-driven, not memory-driven.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curious&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>前往遊戲開發之路</title>
    <link href="http://stephenchen.com/2017/11/15/%E5%89%8D%E5%BE%80%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC%E4%B9%8B%E8%B7%AF/"/>
    <id>http://stephenchen.com/2017/11/15/前往遊戲開發之路/</id>
    <published>2017-11-15T12:26:00.000Z</published>
    <updated>2017-11-26T03:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一切的開始"><a href="#一切的開始" class="headerlink" title="一切的開始"></a>一切的開始</h3><p>一切的開始全是接了原先外包出去的遊戲，在經歷三個禮拜陣痛期的洗禮之後，記錄一下自己這三個禮拜的發生過程。</p>
<h3 id="我們-Team-的背景"><a href="#我們-Team-的背景" class="headerlink" title="我們 Team 的背景"></a>我們 Team 的背景</h3><p>目前我們 App Team 總共有四個人。1 位 iOS (就是我拉~~~) 和 2 位 Android 外加一位曾經是全端的 PM ，我們全部都沒有遊戲開發的背景。</p>
<h3 id="先定大方向"><a href="#先定大方向" class="headerlink" title="先定大方向"></a>先定大方向</h3><p>聽到要開發遊戲的瞬間其實抖了一下，而且只有兩個月的時程包含學習，雖然已經有了後端 Api，而且又在完全沒有任何有經驗的人帶領之下，我們只能從 0 開始。</p>
<p>所以首先要先決定大方向</p>
<h5 id="1-到底要用原生-iOS-跟-Android-開發呢，還是用類似-Unity-這種跨平台的-engine-一次-build-兩個平台？"><a href="#1-到底要用原生-iOS-跟-Android-開發呢，還是用類似-Unity-這種跨平台的-engine-一次-build-兩個平台？" class="headerlink" title="1. 到底要用原生 iOS 跟 Android 開發呢，還是用類似 Unity 這種跨平台的 engine 一次 build 兩個平台？"></a>1. 到底要用原生 iOS 跟 Android 開發呢，還是用類似 Unity 這種跨平台的 engine 一次 build 兩個平台？</h5><p>我們的想法是因為人手不足，採兩次坑不如採一次，於是我們決定使用可以跨平台的開發工具。</p>
<h5 id="2-在來要用什麼樣的跨平台工具呢"><a href="#2-在來要用什麼樣的跨平台工具呢" class="headerlink" title="2. 在來要用什麼樣的跨平台工具呢??"></a>2. 在來要用什麼樣的跨平台工具呢??</h5><p>這問題其實超難的對於新手來說，要考慮<strong>學習成本</strong>(包含了文檔的完善程度，社區活不活躍?，還有對於我們 Team 來說最重要的是有中文文檔)，考慮<strong>人材問題</strong>（總不能選個較冷門的然後招不到開發者吧？），然後<strong>考慮效能</strong>（這邊只能猛看文章惹)以及<strong>可能的開發時間</strong>。<a href="https://thinkmobiles.com/blog/mobile-game-development-tools/" target="_blank" rel="external">這篇有一篇文章各種遊戲引擎比較的文章</a>，中間歷經多次的討論，多番折騰之後我們後來選擇了 <a href="https://www.egret.com/" target="_blank" rel="external">白鷺 Egret</a>。</p>
<h5 id="3-接著語言"><a href="#3-接著語言" class="headerlink" title="3. 接著語言"></a>3. 接著語言</h5><p> <a href="https://www.egret.com/" target="_blank" rel="external">白鷺 Egret</a> 5.0.x 之後導入 <a href="https://www.typescriptlang.org/" target="_blank" rel="external">Typescript</a>為主要的開發語言，因為有了程式底子其實上手不難，但我在這邊除了強烈推薦看完官方文檔之後（雖然我只看了一半..）另外分享我一個小捷徑，就是使用 <strong>linter</strong> 來加速學習。</p>
<p> 其實每個語言都有自己專屬檢查自我代碼風格的工作，關鍵字 <strong>lint</strong>。swift有<a href="https://github.com/realm/SwiftLint" target="_blank" rel="external">SwiftLint</a>，css有<a href="https://github.com/stylelint/stylelint" target="_blank" rel="external">stylelint</a>，當然<a href="https://www.typescriptlang.org/" target="_blank" rel="external">Typescript</a>也有<a href="https://github.com/palantir/tslint" target="_blank" rel="external">Tslint</a>。如果你發現那個語言沒有<strong>linter</strong>的話，趕快去模仿各大 open source 然後去 Github 騙星星吧 XD。</p>
<p> 為什麼我要推薦這個呢？除了到底 {} 要不要換行之外這種小風格問題，它會告訴哪些寫法不好，你第一眼一定不知道他為什麼不好，但是細看下去你會慢慢更了解這語言，它幫你省了很多時間去專心在處理業務邏輯，這對於有沒有太多時間學習的人來說我個人是大力推薦的。</p>
<h5 id="4-再來是框架"><a href="#4-再來是框架" class="headerlink" title="4. 再來是框架"></a>4. 再來是框架</h5><p>因為我們手中的專案我們大家的直覺是會大量的使用<a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">觀察者模式 Observer Pattern</a>，於是 PM 找了一套叫做<a href="http://puremvc.org/" target="_blank" rel="external">PureMVC</a>的架構，這框架確確實實使用了非常大量的(Observer Pattern)，我們弄一個小 Demo 覺得不錯，於是就開始使用了。其實主要原因還是 <a href="https://github.com/dily3825002/EgerPro" target="_blank" rel="external">白鷺 Egret 社區</a> 開源了一個中型遊戲框架也使用<a href="http://puremvc.org/" target="_blank" rel="external">PureMVC</a>於是我們也跟著用….，在沒經驗之前只能從模仿開始。</p>
<ul>
<li>之後再寫一下這框架的坑……..。</li>
</ul>
<h5 id="5-最後是-Egret-學習之路"><a href="#5-最後是-Egret-學習之路" class="headerlink" title="5. 最後是 Egret 學習之路"></a>5. 最後是 Egret 學習之路</h5><p>這邊應該又可以寫成好幾篇了……待續…….。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一切的開始&quot;&gt;&lt;a href=&quot;#一切的開始&quot; class=&quot;headerlink&quot; title=&quot;一切的開始&quot;&gt;&lt;/a&gt;一切的開始&lt;/h3&gt;&lt;p&gt;一切的開始全是接了原先外包出去的遊戲，在經歷三個禮拜陣痛期的洗禮之後，記錄一下自己這三個禮拜的發生過程。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="game" scheme="http://stephenchen.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Swift Optimization Level</title>
    <link href="http://stephenchen.com/2017/10/10/Swift-Whole-Module-Optimization/"/>
    <id>http://stephenchen.com/2017/10/10/Swift-Whole-Module-Optimization/</id>
    <published>2017-10-10T15:18:41.000Z</published>
    <updated>2017-11-26T03:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>什麼是 Optimization Level ? 其實跟在 Xcode 是如何 compile files 有關係。</p>
<p>在 Xcode 裡面分成三種方式 </p>
<h3 id="1-None"><a href="#1-None" class="headerlink" title="1. None"></a>1. None</h3><p>就是 None …..</p>
<h3 id="2-Single-File-Optimization"><a href="#2-Single-File-Optimization" class="headerlink" title="2. Single-File Optimization"></a>2. Single-File Optimization</h3><p>Xcode 會把每一個 file 個別 compile，當下一次需要也只會 compile 有更動過的檔案，但問題在於 compile scope 只侷限在同一個 file </p>
<p>來看 WWDC 的截圖</p>
<p><img src="1.png" alt=""></p>
<h3 id="3-Whole-Module-Optimization"><a href="#3-Whole-Module-Optimization" class="headerlink" title="3. Whole Module Optimization"></a>3. Whole Module Optimization</h3><p>Xcode 7 出現之後才有，原理是 compiler 會一次把你所有的檔案一起 compile </p>
<p>所以 compile 所花的時間會比較長，但是產生出來的 binaries 會 run 的比較快 <a href="https://useyourloaf.com/blog/swift-whole-module-optimization/" target="_blank" rel="external">(大神的測試)</a></p>
<p>再來看 WWDC 的截圖</p>
<p><img src="2.png" alt=""></p>
<p>所以了解以上這三種 compile 的區別之後，就可以更深一層的去了解，當你在 Xcode 7 以上所開新的專案都會預設在 <strong>Debug mode</strong> 下使用 <strong>None</strong>，<strong>Release mode</strong> 下使用 <strong>Whole Module Optimization</strong></p>
<p><img src="3.png" alt=""></p>
<p>以上提供非常表面的分析，其實 Swift <a href="https://github.com/apple/swift/blob/master/docs/OptimizationTips.rst#advice-use-unchecked-integer-arithmetic-when-you-can-prove-that-overflow-cannot-occur" target="_blank" rel="external">官方文檔</a> 提供了更多 Optimization 的相關文章。恩！夜深了，我就先睡了拉：）</p>
<p><a href="https://developer.apple.com/videos/play/wwdc2015/409/" target="_blank" rel="external">WWDC 參考文檔</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;什麼是 Optimization Level ? 其實跟在 Xcode 是如何 compile files 有關係。&lt;/p&gt;
&lt;p&gt;在 Xcode 裡面分成三種方式 &lt;/p&gt;
&lt;h3 id=&quot;1-None&quot;&gt;&lt;a href=&quot;#1-Non
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Git 錯誤日誌紀錄</title>
    <link href="http://stephenchen.com/2017/09/29/Git-%E9%8C%AF%E8%AA%A4%E6%97%A5%E8%AA%8C%E7%B4%80%E9%8C%84/"/>
    <id>http://stephenchen.com/2017/09/29/Git-錯誤日誌紀錄/</id>
    <published>2017-09-29T03:24:53.000Z</published>
    <updated>2017-11-26T03:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一些平常不正常操作所出現的問題以及解決方式</p>
<a id="more"></a>
<h3 id="Fatal-refusing-to-merge-unrelated-histories"><a href="#Fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="Fatal: refusing to merge unrelated histories"></a>Fatal: refusing to merge unrelated histories</h3><p><img src="1.png" alt=""></p>
<h3 id="是如何出現的"><a href="#是如何出現的" class="headerlink" title="是如何出現的"></a>是如何出現的</h3><ol>
<li><p>我在 bitbucket 開了一個新的 repository</p>
</li>
<li><p>clone 下來之後</p>
</li>
<li><p>commmit 一個<strong>新檔案 但沒有 push</strong></p>
</li>
<li><p>朋友來了 聊了一下天</p>
</li>
<li><p>在 bitbucket 的 repository 裡面 commit 新的 readme 檔案</p>
</li>
<li><p>local SourceTree fetch </p>
</li>
</ol>
<p>就這樣出現了這樣的情況</p>
<h3 id="當下的解決方案"><a href="#當下的解決方案" class="headerlink" title="當下的解決方案"></a>當下的解決方案</h3><p> 找到了 <a href="https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories" target="_blank" rel="external">這個</a></p>
<p> 然後輸入</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin branchname --allow-unrelated-histories</div></pre></td></tr></table></figure>
<p>因為在 git 2.9 版開始，git merge 默認不能 merge 兩個沒有相關的分支，所以我下了這個 <strong> –allow-unrelated-histories</strong> 讓 merge 可以強制。merge 兩個無相關的分支。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄一些平常不正常操作所出現的問題以及解決方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://stephenchen.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>License</title>
    <link href="http://stephenchen.com/2017/09/29/License/"/>
    <id>http://stephenchen.com/2017/09/29/License/</id>
    <published>2017-09-29T03:15:00.000Z</published>
    <updated>2017-11-26T03:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Differentiate between each licenses</p>
<a id="more"></a> 
<p>Recently <a href="https://code.facebook.com/posts/300798627056246" target="_blank" rel="external">React relicense</a> issue had been quick hot, so I found a <a href="https://www.zhihu.com/question/28292322" target="_blank" rel="external">easy way</a> to distinguish each licenses and remake it with  English version. </p>
<p><img src="License.png" alt=""></p>
<p>Also Github provide a way for developer easy to <a href="https://choosealicense.com/" target="_blank" rel="external">Choose an open source license</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Differentiate between each licenses&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Code 的相關單字分享</title>
    <link href="http://stephenchen.com/2017/08/29/Code%20%E7%9A%84%E7%9B%B8%E9%97%9C%E5%96%AE%E5%AD%97%E5%88%86%E4%BA%AB/"/>
    <id>http://stephenchen.com/2017/08/29/Code 的相關單字分享/</id>
    <published>2017-08-29T02:51:49.000Z</published>
    <updated>2017-11-26T02:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄平常觀看技術文檔發現覺得不錯的單字</p>
<a id="more"></a>
<h3 id="Spaghetti-code"><a href="#Spaghetti-code" class="headerlink" title="Spaghetti code"></a>Spaghetti code</h3><p>直譯：義大利麵代碼</p>
<p>原文：<a href="https://en.wikipedia.org/wiki/Spaghetti_code" target="_blank" rel="external">WIKI</a></p>
<p>大致上：就是貶抑你的 code 寫得很沒有結構，就像義大麵這般的亂</p>
<h3 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h3><p>直譯：優點跟缺點的簡稱</p>
<h3 id="Statically-typed-programming-languages"><a href="#Statically-typed-programming-languages" class="headerlink" title="Statically typed programming languages"></a>Statically typed programming languages</h3><p>就是我們常說的 <strong>強型別語言</strong>，必須在 compiler time 的時候就給予型態，比如 C，Java，Objective-C。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">256</span>];</div><div class="line"><span class="keyword">int</span> *aNumber;</div></pre></td></tr></table></figure>
<h3 id="Dynamically-typed-programming-languages"><a href="#Dynamically-typed-programming-languages" class="headerlink" title="Dynamically typed programming languages"></a>Dynamically typed programming languages</h3><p>就是我們常說的 <strong>弱型別語言</strong>，比如 php，Haskell。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$x = <span class="string">"Hello world!"</span>;</div><div class="line"><span class="keyword">echo</span> $x;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages" target="_blank" rel="external">Statically And Dynamically Type language 原文</a></p>
</blockquote>
<h3 id="Opt-in"><a href="#Opt-in" class="headerlink" title="Opt-in"></a>Opt-in</h3><p>Opt-in is the short form of “opting in.” It means that someone wants to be involved in something. In the age of technology and the world of sales, the term means that someone has given you permission to send him emails.</p>
<p>簡單來說，歡迎寄信給他，他給你許可了。</p>
<h3 id="Boilerplate-code"><a href="#Boilerplate-code" class="headerlink" title="Boilerplate code"></a>Boilerplate code</h3><p><a href="https://stackoverflow.com/questions/3992199/what-is-boilerplate-code" target="_blank" rel="external">Here</a> said <strong>“boilerplate code” is any seemingly repetitive code that shows up again and again in order to get some result that seems like it ought to be much simpler.</strong></p>
<p>就是經常重複出現的代碼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄平常觀看技術文檔發現覺得不錯的單字&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Git Tracks</title>
    <link href="http://stephenchen.com/2017/08/25/Git-small-tracks/"/>
    <id>http://stephenchen.com/2017/08/25/Git-small-tracks/</id>
    <published>2017-08-25T07:42:10.000Z</published>
    <updated>2017-11-26T03:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>記錄平常在使用 git 一些不錯指令。</p>
<a id="more"></a> 
<h3 id="一-Git-Clone"><a href="#一-Git-Clone" class="headerlink" title="(一) Git Clone"></a>(一) Git Clone</h3><p>最近公司配了一台新電腦，當要重新 clone 一個專案的時候發現 clone 了超久，於是就找找了兩種小方法來縮短 clone 的時間 xd 。</p>
<ul>
<li>只允許 clone 特定數量的 commits</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --depth &lt;Number&gt; &lt;URL&gt;</div></pre></td></tr></table></figure>
<ul>
<li>單純 clone 特定的 branch </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> -b [BranchName] --single-branch [URL] [FolderName]</div></pre></td></tr></table></figure>
<h3 id="二-Git-LFS"><a href="#二-Git-LFS" class="headerlink" title="(二) Git LFS"></a>(二) Git LFS</h3><p>假如要透過 git 來管理較大檔案(超過 2G)的時候 ex: 比如圖片或者影片…等。這時候我推薦使用 <strong><a href="https://git-lfs.github.com/" target="_blank" rel="external">Git Large File Storage</a></strong>，原理就是在目錄底下存了一個 <strong>pointer file</strong>，指向真正存儲這些檔案的地方，當在 clone 這些檔案的時候 git 會自動 mapping 檔案的所在目的地。</p>
<h5 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git lfs install</div></pre></td></tr></table></figure>
<h5 id="指定哪些檔案你要-track-跟蹤的"><a href="#指定哪些檔案你要-track-跟蹤的" class="headerlink" title="指定哪些檔案你要(track)跟蹤的"></a>指定哪些檔案你要(track)跟蹤的</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git lfs track <span class="string">"*.psd"</span></div></pre></td></tr></table></figure>
<p>並會生成 .gitattributes，記得要 git add 上</p>
<h5 id="Down，接著就可以-push-。"><a href="#Down，接著就可以-push-。" class="headerlink" title="Down，接著就可以 push 。"></a>Down，接著就可以 push 。</h5><h3 id="三-Git-Log"><a href="#三-Git-Log" class="headerlink" title="(三) Git Log"></a>(三) Git Log</h3><p>再多人開發的時候，通常會通過拆功能來共同開發，但有一些檔案難免會互相動到，比如 Marco.swift 或者 AppDelegate …等。在我這邊的情境是我想知道在 AppDelegate 哪時候是誰寫了這段 Code，這時候就可以以下指令找出哪幾個 commits 有更改過 AppDelegate.swift。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --follow [Path]</div></pre></td></tr></table></figure>
<p>有網友提供了其他解決方案</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> [Path]</div></pre></td></tr></table></figure>
<p>這兩種唯一不同的地方是當假如 AppDelegate.swift 原本不叫 AppDelegate.swift，而是 AppProtocol.swift 的話那單純只使用 <strong>git log [Path]</strong> 就會沒辦法追蹤。</p>
<p><a href="https://stackoverflow.com/questions/3701404/list-all-commits-for-a-specific-file" target="_blank" rel="external">感謝原文</a></p>
<h3 id="四-SourceTree-統一-commit"><a href="#四-SourceTree-統一-commit" class="headerlink" title="(四) SourceTree 統一 commit"></a>(四) SourceTree 統一 commit</h3><p>在 SourceTree 的偏好設定裡面有一個選項是 Commit Template，在之後每個專案裡面在準備輸入 Commit 紀錄都會出現初始化好的 Commit Template。治療強迫症，是一個不錯的方法來管理整個 Team 的 Commit 規則。</p>
<p><img src="1.png" alt=""></p>
<h3 id="五-SourceTree-repositories-介面也可以透過資料夾區分"><a href="#五-SourceTree-repositories-介面也可以透過資料夾區分" class="headerlink" title="(五) SourceTree repositories 介面也可以透過資料夾區分"></a>(五) SourceTree repositories 介面也可以透過資料夾區分</h3><p><img src="2.png" alt=""></p>
<h3 id="六-欺騙-Git"><a href="#六-欺騙-Git" class="headerlink" title="(六) 欺騙 Git"></a>(六) 欺騙 Git</h3><p>在開發 <a href="http://developer.egret.com/cn/" target="_blank" rel="external">Egret</a> 的時候有些設定檔案(下面叫它 A File)在每次 build 的時候都會變動，造成多人開發的時候非常困難，那怎麼辦呢。</p>
<p>我想到兩種做法</p>
<ol>
<li><p>第一次 push 的時候把 A File push 上去，然後第二次 push 的時候把 A File 加入 .gitignore 裡面，這樣共同開發者 pull 下來的時候有 A File ，然後之後在開發的時候又不會造成 conflict。</p>
</li>
<li><p>使用 assuming </p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git update-index --assume-unchanged path/to/file.txt</div></pre></td></tr></table></figure>
<p>直接上 code 拉，就是假裝這個檔案已經 unchanged，所以之後如何變動都不用造成共同開發的 conflict。感覺層次就上升了一層 xxd。</p>
<p><a href="https://stackoverflow.com/questions/18276951/how-do-i-stop-git-from-tracking-any-changes-to-a-file-from-this-commit-forward" target="_blank" rel="external">感謝原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄平常在使用 git 一些不錯指令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://stephenchen.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>清理 Mac 垃圾檔案</title>
    <link href="http://stephenchen.com/2017/07/22/%E6%B8%85%E7%90%86-Mac-%E5%9E%83%E5%9C%BE%E6%AA%94%E6%A1%88/"/>
    <id>http://stephenchen.com/2017/07/22/清理-Mac-垃圾檔案/</id>
    <published>2017-07-22T03:53:46.000Z</published>
    <updated>2017-11-26T03:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近發現 Mac 空間不太足夠，又不太想換新的 Mac。只好用了最土法煉鋼的方式一個一個檢視。這裡紀錄這次清理 Mac 的步驟，順便制定SOP 方便日後又有問題可以來這裡回顧一下：）。</p>
<h3 id="1-首先先下載能掃描整個硬盤的工具"><a href="#1-首先先下載能掃描整個硬盤的工具" class="headerlink" title="1. 首先先下載能掃描整個硬盤的工具"></a>1. 首先先下載能掃描整個硬盤的工具</h3><p>隨便一個都可以，只要能掃描就好</p>
<ul>
<li><p><a href="https://www.omnigroup.com/more" target="_blank" rel="external">我個人是用這個 OmniDiskSweeper</a></p>
</li>
<li><p><a href="https://macpaw.com/cleanmymac" target="_blank" rel="external">或者好像很強大的付費軟體</a></p>
</li>
<li><p><a href="https://www.avg.com/en-us/avg-cleaner-for-mac" target="_blank" rel="external">沒用過不知道好不好用的 Avg</a></p>
</li>
</ul>
<h3 id="2-掃描"><a href="#2-掃描" class="headerlink" title="2. 掃描"></a>2. 掃描</h3><p>在掃描過程中，會等待不少時間這時候可以先清理 <strong>垃圾桶</strong> 跟 <strong>下載目錄裡的檔案</strong>。</p>
<h5 id="垃圾桶"><a href="#垃圾桶" class="headerlink" title="垃圾桶"></a>垃圾桶</h5><p>首先最直覺的方式就是把垃圾桶清空，當然在清空前順便瀏覽一下哪些檔案是不小心移動進去的，防止不小心刪掉了某些重要的文件。</p>
<p><img src="2.png" alt="empty trash "></p>
<h5 id="下載目錄"><a href="#下載目錄" class="headerlink" title="下載目錄"></a>下載目錄</h5><p>再來就是把下載過的檔案刪除，或者移到外部的硬碟。</p>
<h3 id="3-開始清理"><a href="#3-開始清理" class="headerlink" title="3. 開始清理"></a>3. 開始清理</h3><p><img src="1.png" alt="screen"></p>
<p>結束掃描之後會出現類似的圖片，因為我比較沒時間一個一個資料夾去研究，所以我就會先針對比較大的去研究，比如像是 User, Applications, Library, private, System 底下去研究。</p>
<ul>
<li>但是千萬別手動刪除 /tmp, /private, /var 底下的檔案</li>
</ul>
<p><a href="http://osxdaily.com/2016/01/13/delete-temporary-items-private-var-folders-mac-o-x/" target="_blank" rel="external">根據</a>，如果你手動刪除或者修正的話會有機率出現崩潰或者奇怪的問題，但檔案又這麼大又不能手動很兩難那該怎辦呢？ 比較正確的做法是 <strong>重開機</strong>， 讓 OS 內建的程式去清理。</p>
<blockquote>
<p>補充：<br>在 private/var/vm/sleepimage 有一個 Sleepimage，這簡單來說就是當電腦進入睡眠狀態，會把當前在 RAM 記憶體儲存下面，方便在下次使用的時候可以回復之前的狀態。所以假如當前 RAM 有 2G 的記憶體量，那就會有 2G 的 sleepimage 檔案。</p>
</blockquote>
<p><a href="http://osxdaily.com/2010/10/11/sleepimage-mac/" target="_blank" rel="external">More detail of sleepimage</a></p>
<h3 id="4-手動刪除緩存"><a href="#4-手動刪除緩存" class="headerlink" title="4. 手動刪除緩存"></a>4. 手動刪除緩存</h3><p>很多應用程式都會有緩存，比如 Chrome 開了一個月，那緩存量一定非常驚人，這時候可以把 Chrome 關閉（整個關閉喔）就可以把緩存刪除，或者你可以手動刪除緩存</p>
<p><img src="3.png" alt=""></p>
<p><a href="http://osxdaily.com/2011/12/08/delete-user-caches-in-mac-os-x/" target="_blank" rel="external">More detail of clean cache</a></p>
<h3 id="5-結論"><a href="#5-結論" class="headerlink" title="5. 結論"></a>5. 結論</h3><p>又省了一筆錢買 Mac…。</p>
<h3 id="6-推薦網站"><a href="#6-推薦網站" class="headerlink" title="6. 推薦網站"></a>6. 推薦網站</h3><p>這網站小弟覺得不錯，常常分享很多知識，如果你是 Mac 重度使用者，不妨加到我的最愛去吧。</p>
<p><a href="http://osxdaily.com/2012/11/11/tips-free-up-disk-space-mac-os-x/" target="_blank" rel="external">OSX Daily</a></p>
<h3 id="2017-08-18-Update"><a href="#2017-08-18-Update" class="headerlink" title="2017.08.18 Update"></a>2017.08.18 Update</h3><p>根據<a href="http://osxdaily.com/2012/02/20/clear-versions-history-auto-save-cache-data-in-mac-os-x/" target="_blank" rel="external">這邊文章</a>，新版的 Mac 提供 Versions Feature 跟 Auto-Save 的功能，可以讓你自動回覆到之前的檔案的狀態透過序列的方式。但同時會在 / 底下產生檔案來記錄歷史狀態。</p>
<p><img src="4.png" alt="screen"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/.DocumentRevisions-V100/</div></pre></td></tr></table></figure>
<p>如果沒有需要以上歷史紀錄的話，打開終端機來把它刪除吧。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf .DocumentRevisions-V100</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近發現 Mac 空間不太足夠，又不太想換新的 Mac。只好用了最土法煉鋼的方式一個一個檢視。這裡紀錄這次清理 Mac 的步驟，順便制定SOP 方便日後又有問題可以來這裡回顧一下：）。&lt;/p&gt;
&lt;h3 id=&quot;1-首先先下載能掃描整個硬盤的工具&quot;&gt;&lt;a href=&quot;#1-首
    
    </summary>
    
    
      <category term="mac" scheme="http://stephenchen.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Visual Memory View Debugger</title>
    <link href="http://stephenchen.com/2017/07/11/Xcode-Visual-Memory-View-Debugger/"/>
    <id>http://stephenchen.com/2017/07/11/Xcode-Visual-Memory-View-Debugger/</id>
    <published>2017-07-11T04:32:45.000Z</published>
    <updated>2017-11-26T03:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Useful tool for debug memory leak in iOS</p>
<h3 id="Download-the-porject"><a href="#Download-the-porject" class="headerlink" title="Download the porject"></a>Download the porject</h3><p>I deliberately set memory leaks into below small project.</p>
<p><a href="https://github.com/5SMNOONMS5/xcode_visual_memory_view_debugger" target="_blank" rel="external">Source file</a>,</p>
<p><a href="https://github.com/5SMNOONMS5/xcode_visual_memory_view_debugger/archive/master.zip" target="_blank" rel="external">Download</a>.</p>
<p>For this project I just make a simple UITableView with two cells, first one is common <strong>strong retain cycle</strong> and second one is <strong>closure retain cycle</strong>.</p>
<h3 id="Run-the-project"><a href="#Run-the-project" class="headerlink" title="Run the project"></a>Run the project</h3><p><img src="1.gif" alt="project animation"></p>
<h3 id="Press-the-Debug-View-Graph"><a href="#Press-the-Debug-View-Graph" class="headerlink" title="Press the [Debug View Graph ]"></a>Press the [Debug View Graph ]</h3><p><img src="6.png" alt="Press the Debug View Graph "></p>
<h3 id="Press-the-Show-the-issue-navigator-in-project-navigator"><a href="#Press-the-Show-the-issue-navigator-in-project-navigator" class="headerlink" title="Press the [Show the issue navigator] in project navigator"></a>Press the [Show the issue navigator] in project navigator</h3><p><img src="7.png" alt="Show the issue navigator"></p>
<p>You will see what cause the retain cycle. It’s very easy to diagnosis of memory leak, so now is your time to fix it haha.</p>
<h3 id="How-to-solve"><a href="#How-to-solve" class="headerlink" title="How to solve"></a>How to solve</h3><p>First one is very easy, just set one of the both to weak reference.</p>
<p>Second one I will let this <a href="https://medium.com/compileswift/understanding-memory-leaks-in-closures-48207214cba" target="_blank" rel="external">article</a> explain to you.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Useful tool for debug memory leak in iOS&lt;/p&gt;
&lt;h3 id=&quot;Download-the-porject&quot;&gt;&lt;a href=&quot;#Download-the-porject&quot; class=&quot;headerlink&quot; title=&quot;Down
    
    </summary>
    
    
      <category term="Xcode" scheme="http://stephenchen.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Http Mine Types</title>
    <link href="http://stephenchen.com/2017/07/02/Http-Mine-types/"/>
    <id>http://stephenchen.com/2017/07/02/Http-Mine-types/</id>
    <published>2017-07-02T04:35:59.000Z</published>
    <updated>2017-11-26T03:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻譯<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="external">原文</a></p>
<a id="more"></a>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>MIME type 說穿了就是一種機制用來表示當前用戶端傳送哪種類型的檔案，對於 web 來說副檔名並沒有任何的意義，然而最重要的是伺服器那邊也要正確的設定好，瀏覽器通常會使用 MIME type 去判斷當前接收到哪種類型的檔案。</p>
<p>當然 也有其他種方式去判斷此種檔案是什麼類型</p>
<ul>
<li><p>在微軟的作業系統，副檔名有時候也有助於判斷，但在其他的作業系統特別是在 Linux 跟 Mac OS，副檔名有時候並不是這麼可靠。</p>
</li>
<li><p>神奇的數字(不知道有沒有更好的翻譯)，在某些不同種類的檔案他會有一些規則可以去推斷當前是什麼種類的檔案，比如 GIF 檔會從 47 49 46 38 (16進制)開頭，PNG 檔案會從 89 50 4E 47 (16進制)開頭，但是還是會依照不同的系統有所差別，並不是100％的保證。</p>
</li>
</ul>
<p>在web的世界，必須仔細警慎的設定 MIME type，瀏覽器跟伺服器通常會透過 <strong>神奇的數字</strong> 又或者是 <strong>副檔名</strong> 來定義 MIME type ，又或者透過其他的相關性來判斷正確的 MIME type 當只有 <strong>generic type</strong> 的時候。</p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><p>語法非常簡單，在 / 的左邊是大類，/ 的右邊是子類。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type/subtype</div></pre></td></tr></table></figure>
<p>Example</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">text/plain</div><div class="line">text/html</div><div class="line">image/jpeg</div><div class="line">image/png</div><div class="line">audio/mpeg</div><div class="line">audio/ogg</div><div class="line">audio/*</div><div class="line">video/mp4</div><div class="line">application/octet-stream</div></pre></td></tr></table></figure>
<p>對於只有文字的檔案就用 <strong>text/plain</strong><br>對於只有二進制的檔案就用 <strong>application/octet-stream</strong></p>
<h1 id="Multipart-types"><a href="#Multipart-types" class="headerlink" title="Multipart types"></a>Multipart types</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">multipart/form-data</div><div class="line">multipart/byteranges</div></pre></td></tr></table></figure>
<p>當你的檔案有很多不同類型的部分，這時候就可以使用 <strong>Multipart types</strong>。而 <strong>multipart/form-data</strong> 常被用在 HTML Forms 跟 HTTP POST ， <strong>multipart/byteranges</strong> 則是用來連接 Http 206 Partial Content 到一個特定的子集。HTTP</p>
<blockquote>
<p>Http 206 Partial Content = 當下載檔案或者影片的時候，客戶端跟 server 說要下載的範圍 Range，我要這段檔案的前面 2M 的 bytes，這時候 Server 就會回傳給你了。</p>
</blockquote>
<h1 id="multipart-form-data-介紹"><a href="#multipart-form-data-介紹" class="headerlink" title="multipart/form-data 介紹"></a>multipart/form-data 介紹</h1><p>當在使用 HTML FORM 傳送複雜表單的時候會使用 <strong>multipart/form-data</strong>，並透過 boundary 分隔符 (一長串的字串，開頭會從 - - 開始) 來區分每種不同型態的資料，每一個區塊都是一塊實體並且擁有自己的 HTTP headers，Content-Disposition 和 Content-Type。順帶補充一下，當 boundary 被當作分隔符來使用，通常會忽略 <strong>Content-Length</strong> 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Content-Type: multipart/form-data; boundary=aBoundaryString</div><div class="line">(other headers associated with the multipart document as a whole)</div><div class="line"></div><div class="line">--aBoundaryString</div><div class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;img.jpg&quot;</div><div class="line">Content-Type: image/jpeg</div><div class="line"></div><div class="line">(data)</div><div class="line">--aBoundaryString</div><div class="line">Content-Disposition: form-data; name=&quot;myField&quot;</div><div class="line"></div><div class="line">(data)</div><div class="line">--aBoundaryString</div><div class="line">(more subparts)</div><div class="line">--aBoundaryString--</div></pre></td></tr></table></figure>
<p>再舉一個例子，當我要傳送下列的表單</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8000/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"myTextField"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"myCheckBox"</span>&gt;</span>Check<span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFile"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send the file<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 http 就會這樣顯示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">POST / HTTP/1.1</div><div class="line">Host: localhost:8000</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: keep-alive</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Content-Type: multipart/form-data; boundary=---------------------------8721656041911415653955004498</div><div class="line">Content-Length: 465</div><div class="line"></div><div class="line">-----------------------------8721656041911415653955004498</div><div class="line">Content-Disposition: form-data; name=&quot;myTextField&quot;</div><div class="line"></div><div class="line">Test</div><div class="line">-----------------------------8721656041911415653955004498</div><div class="line">Content-Disposition: form-data; name=&quot;myCheckBox&quot;</div><div class="line"></div><div class="line">on</div><div class="line">-----------------------------8721656041911415653955004498</div><div class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;test.txt&quot;</div><div class="line">Content-Type: text/plain</div><div class="line"></div><div class="line">Simple file.</div><div class="line">-----------------------------8721656041911415653955004498--</div></pre></td></tr></table></figure>
<h1 id="multipart-byteranges-介紹"><a href="#multipart-byteranges-介紹" class="headerlink" title="multipart/byteranges 介紹"></a>multipart/byteranges 介紹</h1><p>而 <strong>multipart/byteranges</strong> 則用在當 Server 只回傳部分的資料給瀏覽器。當 Server 傳送 http 206 Partial Content，瀏覽器會知道 A 檔案將會由 A1,A2,A3,A4 所組成，A1 是在 A 的 0~25%，A2 是 A 的 25~50%，跟其他的 multipart types 一樣，也會透過 boundary 分隔符來區分，一樣也擁有 HTTP headers，Content-Disposition 和 Content-Type。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 206 Partial Content</div><div class="line">Accept-Ranges: bytes</div><div class="line">Content-Type: multipart/byteranges; boundary=3d6b6a416f9b5</div><div class="line">Content-Length: 385</div><div class="line"></div><div class="line">--3d6b6a416f9b5</div><div class="line">Content-Type: text/html</div><div class="line">Content-Range: bytes 100-200/1270</div><div class="line"></div><div class="line">eta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;meta name=&quot;vieport&quot; content</div><div class="line">--3d6b6a416f9b5</div><div class="line">Content-Type: text/html</div><div class="line">Content-Range: bytes 300-400/1270</div><div class="line"></div><div class="line">-color: #f0f0f2;</div><div class="line">        margin: 0;</div><div class="line">        padding: 0;</div><div class="line">        font-family: &quot;Open Sans&quot;, &quot;Helvetica</div><div class="line">--3d6b6a416f9b5--</div></pre></td></tr></table></figure>
<h1 id="MIME-sniffing"><a href="#MIME-sniffing" class="headerlink" title="MIME sniffing"></a>MIME sniffing</h1><p>如果忘記設定 MIME type，或者瀏覽器認為你設定錯誤的 MIME type，瀏覽器將會進行 MIME sniffing，就是開始猜測你的檔案是什麼種類，每個瀏覽器就會有不一樣的結果。但是如果交給瀏覽器設置會有安全上的問題。</p>
<p><a href="https://www.keycdn.com/support/what-is-mime-sniffing/" target="_blank" rel="external">更深一層的了解 MIME sniffing</a></p>
<h1 id="結論就是，設定對的-Mine-type-非常重要"><a href="#結論就是，設定對的-Mine-type-非常重要" class="headerlink" title="結論就是，設定對的 Mine type 非常重要"></a>結論就是，設定對的 Mine type 非常重要</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻譯&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>What is Podfile.lock?</title>
    <link href="http://stephenchen.com/2017/04/24/What-is-Podfile-lock/"/>
    <id>http://stephenchen.com/2017/04/24/What-is-Podfile-lock/</id>
    <published>2017-04-24T03:52:44.000Z</published>
    <updated>2017-11-26T03:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Illustrated explanation of what is Podfile.lock</p>
<a id="more"></a>
<p>Have you ever encounter this error before?</p>
<p><img src="error.png" alt="Error"></p>
<p>Simply run <strong>pod install</strong> can solve this problem, but if you interested in why cause this problem please read on!</p>
<blockquote>
<p>Assume that you have basic concept of using <strong><a href="https://guides.cocoapods.org/using/using-cocoapods.html" target="_blank" rel="external">Cocoapods</a></strong></p>
</blockquote>
<p>That said after first time run <strong>pod install</strong>, you will generate a file call <strong>Podfile.lock</strong>. First, don’t let that <strong>lock</strong> name confuse you. The purpose of <strong>Podfile.lock</strong> is tracking of every version of every library that <strong>Cocoapods</strong> has installed for you, especially working together with a team. so I copy some screenshots from <a href="https://www.youtube.com/watch?v=H-zK1mEwTe0" target="_blank" rel="external">“CocoaPods and Lockfiles (Route 85)”</a> for easily to explain.</p>
<h3 id="Pod-install"><a href="#Pod-install" class="headerlink" title="Pod install"></a>Pod install</h3><p>According to the screenshot, run pod install will install <strong>Version 1.3.3 DemoLibrary</strong> on Suzie’s project</p>
<p><img src="podfile-lock-explanation-1.png" alt="podfile-lock-explanation-1.png"></p>
<h3 id="Fews-days-later-DemoLibrary-update-to-version-1-4-0"><a href="#Fews-days-later-DemoLibrary-update-to-version-1-4-0" class="headerlink" title="Fews days later, DemoLibrary update to version 1.4.0"></a>Fews days later, DemoLibrary update to version 1.4.0</h3><p><img src="podfile-lock-explanation-2.png" alt="podfile-lock-explanation-2.png"></p>
<h3 id="Your-coworker-Mark-run-pod-install-and-then-version-1-4-0-DemoLibrary-will-show-up-on-Mark’s-project-And-when-you-merge-those-two-project-together-Boom-because-your-project-using-the-feature-on-version-1-3-3-but-not-fit-on-Mark’s-project-which-is-version-1-4-0。"><a href="#Your-coworker-Mark-run-pod-install-and-then-version-1-4-0-DemoLibrary-will-show-up-on-Mark’s-project-And-when-you-merge-those-two-project-together-Boom-because-your-project-using-the-feature-on-version-1-3-3-but-not-fit-on-Mark’s-project-which-is-version-1-4-0。" class="headerlink" title="Your coworker(Mark) run pod install and then version 1.4.0 DemoLibrary will show up on Mark’s project, And when you merge those two project together. Boom, because your project using the feature on version 1.3.3 but not fit on Mark’s project which is version 1.4.0。"></a>Your coworker(Mark) run pod install and then version 1.4.0 DemoLibrary will show up on Mark’s project, And when you merge those two project together. Boom, because your project using the feature on version 1.3.3 but not fit on Mark’s project which is version 1.4.0。</h3><p><img src="podfile-lock-explanation-3.png" alt="podfile-lock-explanation-3.png"></p>
<h3 id="So-here-is-how-Podfile-lock-work-record-the-version-of-what-Suzie-had-installed-then-cocoapods-will-check-what-version-Suzie-had-installed-and-then-install-on-Mark’s-project。"><a href="#So-here-is-how-Podfile-lock-work-record-the-version-of-what-Suzie-had-installed-then-cocoapods-will-check-what-version-Suzie-had-installed-and-then-install-on-Mark’s-project。" class="headerlink" title="So here is how Podfile.lock work, record the version of what Suzie had installed, then cocoapods will check what version Suzie had installed and then install on Mark’s project。"></a>So here is how Podfile.lock work, record the version of what Suzie had installed, then cocoapods will check what version Suzie had installed and then install on Mark’s project。</h3><p><img src="podfile-lock-explanation-4.png" alt="podfile-lock-explanation-4.png"></p>
<h3 id="so-if-Mark-run-pod-update-then-Podfile-lock-will-changed-to-version-1-4-0-after-merge-it-will-appear-like-above-error，so-this-is-why-cause-this-error。"><a href="#so-if-Mark-run-pod-update-then-Podfile-lock-will-changed-to-version-1-4-0-after-merge-it-will-appear-like-above-error，so-this-is-why-cause-this-error。" class="headerlink" title="so if Mark run pod update, then Podfile.lock will changed to version 1.4.0, after merge, it will appear like above error，so this is why cause this error。"></a>so if Mark run pod update, then Podfile.lock will changed to version 1.4.0, after merge, it will appear like above error，so this is why cause this error。</h3><p><img src="podfile-lock-explanation-5.png" alt="podfile-lock-explanation-5.png"></p>
<h3 id="Another-nice-feature-is-cocoapods-will-create-a-snapshot-of-every-library-while-using-source-control"><a href="#Another-nice-feature-is-cocoapods-will-create-a-snapshot-of-every-library-while-using-source-control" class="headerlink" title="Another nice feature is cocoapods will create a snapshot of every library while using source control"></a>Another nice feature is cocoapods will create a snapshot of every library while using source control</h3><p><img src="podfile-lock-explanation-6.png" alt="podfile-lock-explanation-6.png"></p>
<h3 id="Briefly-here-is-what-I-learn-from-this-video-hope-you-like-it"><a href="#Briefly-here-is-what-I-learn-from-this-video-hope-you-like-it" class="headerlink" title="Briefly, here is what I learn from this video, hope you like it."></a>Briefly, here is what I learn from this video, hope you like it.</h3><p><a href="https://www.youtube.com/watch?v=H-zK1mEwTe0" target="_blank" rel="external">Reference1</a></p>
<p><a href="https://guides.cocoapods.org/using/using-cocoapods.html" target="_blank" rel="external">Reference2</a></p>
<h3 id="If-you-use-Cartfile-instead-of-cocoapods-on-your-project-the-Cartfile-resolved-work-exactly-the-same-as-Podfile-lock"><a href="#If-you-use-Cartfile-instead-of-cocoapods-on-your-project-the-Cartfile-resolved-work-exactly-the-same-as-Podfile-lock" class="headerlink" title="If you use Cartfile instead of cocoapods on your project, the Cartfile.resolved work exactly the same as Podfile.lock"></a>If you use Cartfile instead of cocoapods on your project, the <strong>Cartfile.resolved</strong> work exactly the same as <strong>Podfile.lock</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Illustrated explanation of what is Podfile.lock&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Simple Way To Build An iOS Framework</title>
    <link href="http://stephenchen.com/2017/04/21/Simple-way-build-an-framework/"/>
    <id>http://stephenchen.com/2017/04/21/Simple-way-build-an-framework/</id>
    <published>2017-04-21T08:03:08.000Z</published>
    <updated>2017-11-26T03:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Creating a reusable, sharable code across different projects and deploy with <a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a></p>
<a id="more"></a>
<p>This article has minimal version iOS 8 require， because Apple allow developer create their own dynamic framework since iOS 8。</p>
<p>Below are some references you can dig into it。</p>
<p><a href="http://stackoverflow.com/questions/27899799/ios-static-vs-dynamic-frameworks-clarifications" target="_blank" rel="external">iOS Static vs Dynamic frameworks clarifications</a></p>
<p><a href="https://github.com/jverkoey/iOS-Framework" target="_blank" rel="external">Building a static iOS framework is a pain in the ass</a></p>
<h3 id="OS-Environment"><a href="#OS-Environment" class="headerlink" title="OS Environment"></a>OS Environment</h3><p>macOS Sierra</p>
<h3 id="Step-1-Create-a-new-framework-project"><a href="#Step-1-Create-a-new-framework-project" class="headerlink" title="Step 1: Create a new framework project"></a>Step 1: Create a new framework project</h3><p>Just like create a normal project.</p>
<p><img src="create-framework.gif" alt="create-framework"></p>
<p>Then add your files into it.</p>
<h3 id="Step-2-Share-your-framework"><a href="#Step-2-Share-your-framework" class="headerlink" title="Step 2: Share your framework"></a>Step 2: Share your framework</h3><p>Make scheme sharable.</p>
<p><img src="create-framework2.gif" alt="create-framework2"></p>
<h3 id="Step-3-Add-files-into-your-framework-and-finish"><a href="#Step-3-Add-files-into-your-framework-and-finish" class="headerlink" title="Step 3: Add files into your framework and finish."></a>Step 3: Add files into your framework and finish.</h3><p>First add your files into your framework then generate this framework by press <strong>commnad + B</strong>. After all, right click <strong>show in finder</strong> option with popup menu.</p>
<p><img src="create-framework3.gif" alt="create-framework3"></p>
<h3 id="Step-4-Before-Deploy"><a href="#Step-4-Before-Deploy" class="headerlink" title="Step 4: Before Deploy"></a>Step 4: Before Deploy</h3><p>Run below code or <a href="https://github.com/Carthage/Carthage#share-your-xcode-schemes" target="_blank" rel="external">see office guildline</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">carthage build --no-skip-current</div></pre></td></tr></table></figure>
<p><img src="create-framework4.gif" alt="create-framework4"></p>
<p>Then checking the Carthage/Build folder.</p>
<p><img src="create-framework5.png" alt="create-framework5"></p>
<h3 id="Setp-5-Make-a-badge"><a href="#Setp-5-Make-a-badge" class="headerlink" title="Setp 5: Make a badge"></a>Setp 5: Make a badge</h3><p>add below into your Readme.md, it shows like <a href="https://github.com/Carthage/Carthage" target="_blank" rel="external"><img src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" alt="Carthage compatible"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)</div></pre></td></tr></table></figure>
<h3 id="Step-6-Deploy-it-with-private-way"><a href="#Step-6-Deploy-it-with-private-way" class="headerlink" title="Step 6: Deploy it with private way"></a>Step 6: Deploy it with private way</h3><p>Deploy it to your personal git service such as <strong>BitBucket</strong>、<strong>GitLab</strong>、<strong>Github</strong>….etc.</p>
<p>Then add private URL inside <strong>Cartfile</strong> on any of your projects.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> git \<span class="string">"Your Git URL Address\" &gt; Cartfile</span></div></pre></td></tr></table></figure>
<p><img src="create-framework6.gif" alt="create-framework6"></p>
<h1 id="Step-7-Deploy-it-with-public-way"><a href="#Step-7-Deploy-it-with-public-way" class="headerlink" title="Step 7: Deploy it with public way"></a>Step 7: Deploy it with public way</h1><p>to be continue….</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Creating a reusable, sharable code across different projects and deploy with &lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carthage&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Integrate With Fastlane And Bash-Script</title>
    <link href="http://stephenchen.com/2017/03/22/Fastlane/"/>
    <id>http://stephenchen.com/2017/03/22/Fastlane/</id>
    <published>2017-03-22T08:03:28.000Z</published>
    <updated>2017-11-26T03:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用 fastlane + script 一鍵產出 .ipa 檔。</p>
<a id="more"></a>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">macOS Sierra</div></pre></td></tr></table></figure>
<h3 id="面臨的問題"><a href="#面臨的問題" class="headerlink" title="面臨的問題"></a>面臨的問題</h3><p>因工作所需，需要發布只提供 <strong>企業使用</strong> 的 ipa 檔，每個 ipa 檔會擁有不同格式的 plist ，而且數量可能不少。</p>
<h3 id="本篇分享概要"><a href="#本篇分享概要" class="headerlink" title="本篇分享概要"></a>本篇分享概要</h3><p>其實 <a href="https://fastlane.tools/" target="_blank" rel="external">fastlane</a> 官方 已經很詳細了，所以這裡只分享大致流程，並不打算寫的太詳細。</p>
<h3 id="如何自動上架"><a href="#如何自動上架" class="headerlink" title="如何自動上架"></a>如何自動上架</h3><p>目前iOS我知道打包除了手動之外，還有幾種方式分別是<a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html" target="_blank" rel="external">xcodebuild</a>和<a href="https://github.com/facebook/xctool" target="_blank" rel="external">xctool</a>，而今天想分享的是 <a href="https://fastlane.tools/" target="_blank" rel="external">fastlane</a></p>
<h3 id="步驟1：首先把-Fastlane-安裝"><a href="#步驟1：首先把-Fastlane-安裝" class="headerlink" title="步驟1：首先把 Fastlane 安裝"></a>步驟1：首先把 Fastlane 安裝</h3><ul>
<li>安裝 homebrew</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<ul>
<li>透過 homebrew 來安裝 fastlane</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew cask install fastlane</div></pre></td></tr></table></figure>
<h3 id="步驟2：Fastlane-初始化設定"><a href="#步驟2：Fastlane-初始化設定" class="headerlink" title="步驟2：Fastlane 初始化設定"></a>步驟2：Fastlane 初始化設定</h3><ul>
<li>第一種：(建議）</li>
</ul>
<p>透過 <a href="https://fabric.io/features/distribution?utm_campaign=github_readme" target="_blank" rel="external">官方</a>提供的文檔來產生初始化的程式碼</p>
<ul>
<li>第二種：開啟 Terminal 到當前 iOS 的資料夾下，init 之後會要你需入輸入帳號以及其他相關資料</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastlane init</div></pre></td></tr></table></figure>
<p><img src="fastlaneinit2.png" alt="fastlaneinit2.png"></p>
<p>那兩種哪邊不一樣呢？，第一種其實已經幫你把程式碼初始化了，讓你少去比較多的步驟，接著我們打開 <strong>Fastlane</strong> 來看一下的 Code。</p>
<p>接著我們來看 fastlane</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">fastlane_version <span class="string">"1.109.0"</span></div><div class="line"></div><div class="line">generated_fastfile_id <span class="string">"adb8dedb-e633-43f6-87b0-03588e2f5a43"</span></div><div class="line"></div><div class="line">default_platform <span class="symbol">:ios</span></div><div class="line"></div><div class="line"><span class="comment"># 原本的</span></div><div class="line">lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line"></div><div class="line">  <span class="comment"># build your iOS app</span></div><div class="line">  gym(</div><div class="line">    <span class="comment"># scheme: "YourScheme"</span></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="comment"># upload to Beta by Crashlytics</span></div><div class="line">  crashlytics(</div><div class="line">    <span class="comment"># api_token: "YOUR_API_KEY",</span></div><div class="line">    <span class="comment"># build_secret: "YOUR_BUILD_SECRET"</span></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="comment"># slack(</span></div><div class="line">  <span class="comment">#   slack_url: "https://hooks.slack.com/services/IDS"</span></div><div class="line">  <span class="comment"># )</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 自定義名稱我在這邊自定義名稱為 BABABA</span></div><div class="line">lane <span class="symbol">:BABABA</span> <span class="keyword">do</span></div><div class="line"></div><div class="line">  actions <span class="number">1</span>(</div><div class="line">    <span class="symbol">key1:</span> <span class="string">"value1"</span></div><div class="line">  )</div><div class="line"></div><div class="line">  actions <span class="number">2</span>(</div><div class="line">    <span class="symbol">key1:</span> <span class="string">"value1"</span>,</div><div class="line">    <span class="symbol">key2:</span> <span class="string">"value2"</span>,</div><div class="line">    <span class="symbol">key3:</span> <span class="string">"value3"</span>,</div><div class="line">  )</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>其實他的邏輯非常簡單，你可以想像成宣告一個Class，然後裡面有不同的 <strong>actions</strong> ，每個 <strong>actions</strong> 都有屬於他的 key:value 型態的變數，那  <strong>actions</strong>  哪些呢？依造官方來說有 <strong>deliver</strong> ， <strong>supply</strong> …等。以下是所有的 actions </p>
<p><img src="allactions.png" alt="allactions"></p>
<p>這邊翻譯官方幾個比較常用的 Commands</p>
<table>
<thead>
<tr>
<th style="text-align:left">Commands</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">fastlane actions</td>
<td style="text-align:right">把所有的actions列出來</td>
</tr>
<tr>
<td style="text-align:left">fastlane lanes</td>
<td style="text-align:right">把所有在 Fastlane 檔案底下的 lane 和 描述列出來</td>
</tr>
<tr>
<td style="text-align:left">fastlane list</td>
<td style="text-align:right">同上，但是不把描述列出來</td>
</tr>
<tr>
<td style="text-align:left">fastlane new_action</td>
<td style="text-align:right">創造一個新的 actions</td>
</tr>
<tr>
<td style="text-align:left">fastlane env</td>
<td style="text-align:right">這是當你有問題的時候，可以幫你把環境快速的列出來好放到 issue 給別人看</td>
</tr>
</tbody>
</table>
<p>另外翻譯官方重點 <strong>actions</strong>，外加幾個我感覺比較常用的＠＠</p>
<table>
<thead>
<tr>
<th style="text-align:left">常用Actions名稱</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">deliver</td>
<td style="text-align:right">上傳screenshots，metadata到 App Store</td>
</tr>
<tr>
<td style="text-align:left">supply</td>
<td style="text-align:right">上傳 Android app，metadata到 Google Play</td>
</tr>
<tr>
<td style="text-align:left">snapshot</td>
<td style="text-align:right">自動幫你在地化的方式拍照，支援 iOS and tvOS</td>
</tr>
<tr>
<td style="text-align:left">screengrab</td>
<td style="text-align:right">自動幫你的 Android App 在地化的方式拍照，支援 iOS and tvOS</td>
</tr>
<tr>
<td style="text-align:left">frameit</td>
<td style="text-align:right">幫你把 screenshots 放到正確的機型</td>
</tr>
<tr>
<td style="text-align:left">pem</td>
<td style="text-align:right">自動幫你產生和更新推播憑證</td>
</tr>
<tr>
<td style="text-align:left">sigh</td>
<td style="text-align:right">產生 provisioning profile</td>
</tr>
<tr>
<td style="text-align:left">produce</td>
<td style="text-align:right">自動產生新的 iOS App 在iTunes Connect</td>
</tr>
<tr>
<td style="text-align:left">cert</td>
<td style="text-align:right">自動產生跟管理 iOS code signing certificates</td>
</tr>
<tr>
<td style="text-align:left">spaceship</td>
<td style="text-align:right">一個可以存取 Apple Dev Center and iTunes Connect 的 Ruby 函式庫</td>
</tr>
<tr>
<td style="text-align:left">pilot</td>
<td style="text-align:right">管理 TestFlight 的使用者</td>
</tr>
<tr>
<td style="text-align:left">boarding</td>
<td style="text-align:right">邀請新使用者到 TestFlight</td>
</tr>
<tr>
<td style="text-align:left">gym</td>
<td style="text-align:right">自動產生 .ipa 檔案</td>
</tr>
<tr>
<td style="text-align:left">match</td>
<td style="text-align:right">用git來同步憑證和證書，解決多人開發問題</td>
</tr>
<tr>
<td style="text-align:left">scan</td>
<td style="text-align:right">跑專案的測試</td>
</tr>
<tr>
<td style="text-align:left">slack</td>
<td style="text-align:right">對 slack 進行通知</td>
</tr>
</tbody>
</table>
<p>那 <strong> </strong>actions<strong> 的 key1，value1 有哪些呢？請在 Terminal 打上 fastlane action [方法]，比如我想要看 </strong>supply** 有哪些參數：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastlane action supply</div></pre></td></tr></table></figure>
<p><img src="parameters.png" alt="parameters"></p>
<p>像這次想要自動化產生 ipa 檔的話就要研究 <strong>gym</strong>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastlane action gym</div></pre></td></tr></table></figure>
<p><img src="gym.png" alt="gym"></p>
<p>接著就慢慢看囉～依照自己的需求去決定使用哪些。</p>
<h3 id="步驟3：執行-Fastlane"><a href="#步驟3：執行-Fastlane" class="headerlink" title="步驟3：執行 Fastlane"></a>步驟3：執行 Fastlane</h3><p>fastlane [name]，如上圖我的名稱是 <strong>BABABA</strong>，那就在終端機上打以下指令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastlane BABABA</div></pre></td></tr></table></figure>
<p>這邊也許會遇到一些環境問題，以及安裝問題，這時候就要一個一個自己去解決了，每個人遇到的問題不太一樣，可以留言在下面互相討論。不過有個問題我也覺得非常麻煩，我把這問題寫在最下面的 TroubleShooting 部分</p>
<h3 id="步驟4：參考範例走"><a href="#步驟4：參考範例走" class="headerlink" title="步驟4：參考範例走"></a>步驟4：參考範例走</h3><p>這邊提供<a href="https://github.com/fastlane/examples" target="_blank" rel="external">一些開源</a>有使用 Fastlane 的，可以參考別人都使用了些什麼。</p>
<h2 id="步驟5：循環步驟4"><a href="#步驟5：循環步驟4" class="headerlink" title="步驟5：循環步驟4"></a>步驟5：循環步驟4</h2><p>這邊一定要想成功，不然等下之後再結合 script 的時候問題會更多。</p>
<h3 id="步驟6：結合腳本語言"><a href="#步驟6：結合腳本語言" class="headerlink" title="步驟6：結合腳本語言"></a>步驟6：結合腳本語言</h3><p>這部分就比較簡單了，我把 code 放在 <a href="https://github.com/5SMNOONMS5/TestFastlane" target="_blank" rel="external">github</a> 上。大致架構圖如下</p>
<p><img src="bash_architecture.png" alt="bash_architecture"></p>
<p>這邊的架構是所有跟 <strong>script</strong> 相關的 .sh 檔案都會在 script 資料夾底下，透過 <a href="https://www.gnu.org/software/sed/manual/sed.txt" target="_blank" rel="external">sed</a> 去執行變更 Info.plish 檔案裡面的變數，參數設定則是放在 <strong>script/config</strong> 裡面。</p>
<p>在終端機底下執行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先cd到 script 目錄資料夾底下，先看看提供了什麼方法</span></div><div class="line">sh archive -h</div><div class="line"><span class="comment"># 然後執行</span></div><div class="line">sh archive -s</div></pre></td></tr></table></figure>
<p><img src="archive.png" alt="archive"></p>
<h3 id="步驟7：結合兩者-Fastlane-Script"><a href="#步驟7：結合兩者-Fastlane-Script" class="headerlink" title="步驟7：結合兩者 Fastlane + Script"></a>步驟7：結合兩者 Fastlane + Script</h3><p>其實核心價值就是透過 Script 去把 plist 裡面的值依造需求作改變，然後再呼叫 fastlane 去執行打包 ipa 。</p>
<h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><h3 id="Connection-reset-by-peer-SSL-connect"><a href="#Connection-reset-by-peer-SSL-connect" class="headerlink" title="Connection reset by peer - SSL_connect"></a>Connection reset by peer - SSL_connect</h3><p>因為我的 ruby 版本是 2.0.0，蘋果最近把服務器的TLS版本更新到 TLS 1.2，在我當前的 ruby 是不支持的，所以我要想辦法升級到 支援 TLS 1.2的 ruby 版本。</p>
<p><img src="opensslfail.png" alt="opensslfail.png"></p>
<p>在解決問題之前，我想分享一些我個人覺得蠻需要被了解的基礎，就是因為我也對 ruby 不了解，所以吃了不少虧在解決這個問題上</p>
<p>首先安裝 ruby 可以透過 <a href="https://brew.sh/" target="_blank" rel="external">homebrew</a> ， <a href="https://github.com/rbenv/rbenv" target="_blank" rel="external">rbenv</a> 以及 <a href="https://rvm.io/" target="_blank" rel="external">rvm</a>，一台電腦可能有很多 ruby 的版本存在，你必須讓你當前的 ruby 版本使用可以支援 TLS 1.2 的版本，不管你是用什麼套件安裝，但我個人這邊的問題是當初我忘記我用什麼來安裝的。</p>
<p>對於不知道用什麼來安裝的囧情況，我用了最笨的方法來檢查我是不是有以上三個套件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切換到使用者根目錄</span></div><div class="line"><span class="built_in">cd</span> ~</div><div class="line"><span class="comment"># 檢查是否有安裝 rvm</span></div><div class="line">ls -al | grep .rvm</div><div class="line"><span class="comment"># 檢查是否有安裝 rbenv</span></div><div class="line">ls -al | grep .rbenv</div><div class="line"><span class="comment"># 檢查是否 homebrew 有安裝 ruby</span></div><div class="line">brew list</div></pre></td></tr></table></figure>
<p>這下好了，很幸運的我並沒有使用 brew 安裝。但我有可能是使用 rvm 或者是 rbenv 安裝。之後我又奮鬥了很久？茫茫大海之中，我看到了這段</p>
<blockquote>
<p>Hey everyone, we’ve been working on a new way to install and use fastlane, all you have to do is to download <a href="https://kits-crashlytics-com.s3.amazonaws.com/fastlane/standalone/latest.zip" target="_blank" rel="external">fastlane.zip</a> and double click the install file. This will install fastlane with all its Ruby and OpenSSL dependencies, and should all work out of the box.<br>We just finished building this, and would love your early feedback on this beta. Please let us know how it works for you and if you run into any problems 👍<br>Download the latest version here.</p>
</blockquote>
<p>大意就是他把 fastlane 所需要的 dependencies 全部放在 <strong>~./fastlane/bin</strong> 底下，有點類似 docker 的感覺，安裝好之後，我的問題也解決了。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/fastlane/fastlane/issues/6553" target="_blank" rel="external">Connection reset by peer</a></p>
<p><a href="https://github.com/fastlane/fastlane/issues/6758" target="_blank" rel="external">cert fails with error ‘Connection reset by peer - SSL_connect’</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 fastlane + script 一鍵產出 .ipa 檔。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Transfer Git Repositories</title>
    <link href="http://stephenchen.com/2017/02/21/Transfer-Git-repositories/"/>
    <id>http://stephenchen.com/2017/02/21/Transfer-Git-repositories/</id>
    <published>2017-02-21T08:51:43.000Z</published>
    <updated>2017-11-26T03:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天公司剛好要把 原先的 Git Server 轉移到另外一台 Server，於是研究了一下</p>
<a id="more"></a>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><ul>
<li>先把<strong>全部</strong>的資源包含tag，Commit 節點，branch 全部都抓到 local 端</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div></pre></td></tr></table></figure>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><ul>
<li>檢查一下所有的remote 跟 local branch 是不是都有在 local 端了</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* master</div><div class="line">remotes/origin/develop</div><div class="line">remotes/origin/master</div><div class="line">remotes/origin/release</div></pre></td></tr></table></figure>
<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><ul>
<li>如果沒有請重新 check out 出來，像上面我們總共有三個 branch ，分別是<strong>develop</strong>，<strong>master</strong>還有 <strong>release</strong>，但是上面只有 <strong>master</strong> 是在 local 端，請在執行下面的指令。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#git checkout -b "local name" "remote name"</span></div><div class="line">git checkout -b develop remotes/origin/master</div><div class="line">git checkout -b release remotes/origin/release</div></pre></td></tr></table></figure>
<ul>
<li>然後再確認一次</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a</div></pre></td></tr></table></figure>
<ul>
<li>螢幕會顯示</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">develop</div><div class="line">master</div><div class="line">* release</div><div class="line">remotes/origin/develop</div><div class="line">remotes/origin/master</div><div class="line">remotes/origin/release</div></pre></td></tr></table></figure>
<h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><ul>
<li>把新的 git service 路徑加進去</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add new-origin <span class="string">"新的URL路徑"</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>新的URL路徑</strong> 看是要透過 <strong>http</strong> 或者是 <strong>ssh</strong>，<strong>ssh</strong> 方式先加 <strong>public key</strong> 到新的 <strong>git service</strong></li>
</ul>
<h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><ul>
<li><p>都完成之後，請務必上面步驟都要準確，不然到時候少資料就掰惹。</p>
</li>
<li><p>接著執行</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --all new-origin</div></pre></td></tr></table></figure>
<ul>
<li>如果有 <strong>tag</strong> 的話</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --tags new-origin</div></pre></td></tr></table></figure>
<h3 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h3><ul>
<li><p>到新的 server 看一下 repo 是否成功惹。</p>
</li>
<li><p>當確認完成之後，把原本的舊的 server URL <strong>刪除</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div></pre></td></tr></table></figure>
<ul>
<li>然後再把新的 remote name 改掉變成新的URL路徑</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote rename new-origin origin</div></pre></td></tr></table></figure>
<h3 id="Git-mirror"><a href="#Git-mirror" class="headerlink" title="Git mirror"></a>Git mirror</h3><blockquote>
<p>2017/04/19 update</p>
</blockquote>
<p>無意間同事發了這篇鏈接，覺得比我之前的方法要更簡潔更方便，真後悔沒有提早看到<br><a href="https://dinos80152.wordpress.com/2015/09/21/%E4%BD%BF%E7%94%A8-git-mirror-%E7%84%A1%E7%97%9B%E8%BD%89%E7%A7%BB-git-server/" target="_blank" rel="external">git mirror</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天公司剛好要把 原先的 Git Server 轉移到另外一台 Server，於是研究了一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://stephenchen.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Custom Builds In Sublime 3</title>
    <link href="http://stephenchen.com/2017/01/27/Custom-build-in-Sublime-Text-3/"/>
    <id>http://stephenchen.com/2017/01/27/Custom-build-in-Sublime-Text-3/</id>
    <published>2017-01-27T08:44:48.000Z</published>
    <updated>2017-11-26T03:02:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Custom builds in sublime 。</p>
<a id="more"></a>
<p>Recently I start to learn C language, so intuitively open the Xcode. Xcode is good, but some times it take too long to open the application. Until my colleague ask me, Do you know how to build c program on <a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>?</p>
<p>So here is my little build process on <strong>Mac OS X EI Capitan</strong></p>
<h3 id="Install-Sublime-Text"><a href="#Install-Sublime-Text" class="headerlink" title="Install Sublime Text"></a>Install Sublime Text</h3><p><a href="https://www.sublimetext.com/3" target="_blank" rel="external">Office Download Page</a></p>
<h3 id="Create-a-custom-build-system"><a href="#Create-a-custom-build-system" class="headerlink" title="Create a custom build system"></a>Create a custom build system</h3><p><img src="build_system.gif" alt="gif animation"></p>
<h3 id="Default-file-location"><a href="#Default-file-location" class="headerlink" title="Default file location"></a>Default file location</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/&lt;Your Name&gt;/Library/Application Support/Sublime Text 3/Packages/User/</div></pre></td></tr></table></figure>
<h3 id="Paste-this-code-into-sublime-build-file"><a href="#Paste-this-code-into-sublime-build-file" class="headerlink" title="Paste this code into .sublime-build file"></a>Paste this code into .sublime-build file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;cmd&quot; : [&quot;gcc $file_name -o $&#123;file_base_name&#125; &amp;&amp; ./$&#123;file_base_name&#125; &amp;&amp; rm ./$&#123;file_base_name&#125;&quot;],</div><div class="line">	&quot;selector&quot; : &quot;source.c&quot;,</div><div class="line">	&quot;shell&quot;: true,</div><div class="line">	&quot;working_dir&quot; : &quot;$file_path&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Start-coding-press-command-B"><a href="#Start-coding-press-command-B" class="headerlink" title="Start coding, press command + B"></a>Start coding, press command + B</h3><p><img src="build.gif" alt="build"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://stackoverflow.com/questions/24225343/how-to-compile-and-run-c-in-sublime-text-3" target="_blank" rel="external">stack overflow</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Custom builds in sublime 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Funny Commands</title>
    <link href="http://stephenchen.com/2017/01/19/Funny-commands/"/>
    <id>http://stephenchen.com/2017/01/19/Funny-commands/</id>
    <published>2017-01-19T12:15:47.000Z</published>
    <updated>2017-11-26T03:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>A set of ASCII pictures that enjoy code life though hard up .</p>
<a id="more"></a>
<h3 id="OS-Environment"><a href="#OS-Environment" class="headerlink" title="OS Environment"></a>OS Environment</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mac OS X EI Capitan</div></pre></td></tr></table></figure>
<h3 id="Cowsay"><a href="#Cowsay" class="headerlink" title="Cowsay"></a>Cowsay</h3><p>Firstly I want to introduce a cute ASCII picture of a cow named <a href="https://en.wikipedia.org/wiki/Cowsay" target="_blank" rel="external">cowsay</a> , this doll can show a message that you type . As its name cow + say .</p>
<p><img src="cowsay.png" alt="cowsay.png"></p>
<p>So that dig into it . First install it with below two commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> &lt; /dev/null 2&gt; /dev/null</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install cowsay</div></pre></td></tr></table></figure>
<p>After settle down all installation</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cowsay <span class="string">"Hello, Word"</span></div></pre></td></tr></table></figure>
<p>There will show you a cow with a message “Hello, Word” , but I am not satisfied with it . In fact, there is more than one doll that you can use . For example :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cowsay -l</div></pre></td></tr></table></figure>
<p>It will show lots of doll that you can replace with .</p>
<p><img src="dolls.png" alt="dolls"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># formula</span></div><div class="line"><span class="comment"># cowsay -f [new doll] "message here"</span></div><div class="line">cowsay -f eyes <span class="string">"New dolls say hello word"</span></div></pre></td></tr></table></figure>
<p><img src="eyes.png" alt="eyes.png"></p>
<p>Ha . There are more informations<br><a href="http://ithelp.ithome.com.tw/articles/10127590" target="_blank" rel="external">source 1</a><br><a href="http://ithelp.ithome.com.tw/articles/10143897" target="_blank" rel="external">source 2</a></p>
<h3 id="More-powerful-cowsay"><a href="#More-powerful-cowsay" class="headerlink" title="More powerful cowsay"></a>More powerful cowsay</h3><p><img src="super_cowsay.gif" alt="powerful cowsay"></p>
<p>Install <strong>fortune</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install fortune</div></pre></td></tr></table></figure>
<p>Then install <strong>lolcat</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install lolcat</div></pre></td></tr></table></figure>
<p>Run it</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fortune | cowsay | lolcat</div></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/dakull/6615458" target="_blank" rel="external">more here</a></p>
<h3 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h3><p>Another funny commands is a <strong>sl</strong> , it shows like a train</p>
<p><img src="train.gif" alt="train picture"></p>
<p>Install it with below two commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> &lt; /dev/null 2&gt; /dev/null</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install sl</div></pre></td></tr></table></figure>
<p>Run it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sl</div></pre></td></tr></table></figure>
<h3 id="Wanna-watch-a-movies"><a href="#Wanna-watch-a-movies" class="headerlink" title="Wanna watch a movies?"></a>Wanna watch a movies?</h3><p><img src="star_war.gif" alt="star_war"></p>
<p>Try it , but …. it really take a long time .</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet towel.blinkenlights.nl</div></pre></td></tr></table></figure>
<h3 id="9-x-9-multiplication-table"><a href="#9-x-9-multiplication-table" class="headerlink" title="9 x 9 multiplication table"></a>9 x 9 multiplication table</h3><p><img src="multiplication table.png" alt="multiplication table"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..12&#125;; <span class="keyword">do</span> <span class="keyword">for</span> j <span class="keyword">in</span> $(seq 1 <span class="variable">$i</span>); <span class="keyword">do</span> <span class="built_in">echo</span> -ne <span class="variable">$i</span>Ã—<span class="variable">$j</span>=$((i*j))\\t;<span class="keyword">done</span>; <span class="built_in">echo</span>;<span class="keyword">done</span></div></pre></td></tr></table></figure>
<h1 id="A-cute-ponysay"><a href="#A-cute-ponysay" class="headerlink" title="A cute ponysay"></a>A cute ponysay</h1><p><img src="pony1.png" alt="pony picture1"></p>
<p><img src="pony2.png" alt="pony picture2"></p>
<p>Now is the moment to be quiet , just enjoy the beauty .</p>
<p>Install commands .</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> &lt; /dev/null 2&gt; /dev/null</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ponysay</div></pre></td></tr></table></figure>
<p>Run it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ponysay --quote</div></pre></td></tr></table></figure>
<p>Or run help for more</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ponysay -h</div></pre></td></tr></table></figure>
<h3 id="Cmatrix"><a href="#Cmatrix" class="headerlink" title="Cmatrix"></a>Cmatrix</h3><p><strong>The Matrix</strong> . How spectacular it is .</p>
<p><img src="matrix.gif" alt="matrix"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install cmatrix</div></pre></td></tr></table></figure>
<p>More animation <a href="http://www.tecmint.com/20-funny-commands-of-linux-or-linux-is-fun-in-terminal/" target="_blank" rel="external">here</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A set of ASCII pictures that enjoy code life though hard up .&lt;/p&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://stephenchen.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Sockets</title>
    <link href="http://stephenchen.com/2017/01/12/Socket/"/>
    <id>http://stephenchen.com/2017/01/12/Socket/</id>
    <published>2017-01-12T14:41:19.000Z</published>
    <updated>2017-11-26T03:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇轉自 CocoaAsyncSocket 的 <a href="https://github.com/robbiehanson/CocoaAsyncSocket/wiki/Intro" target="_blank" rel="external">Wiki</a>， 介紹 Socket 的基本概要，並加上我自己個人的一些想法！</p>
<a id="more"></a>
<h3 id="Sockets-Ports-and-DNS-Oh-My"><a href="#Sockets-Ports-and-DNS-Oh-My" class="headerlink" title="Sockets, Ports, and DNS - Oh My!"></a>Sockets, Ports, and DNS - Oh My!</h3><p>以網路的術語，一台電腦可能擁有很多的 socket 端口。當兩台電腦要連結，比如從自己的桌機連到 yahoo 的主機，兩台電腦會建立一個連線，從使用者的 socket 端口到 yahoo 主機的 socket 端口，這條連線我們稱它為 <strong>Network connection</strong>。</p>
<p>要建立這條 Network connection，自己電腦的 socket 必須先得知 yahoo 主機的 socket 端口位置。知道位置才能進行連線，而每個 socket 的組成大致上區分為兩個區塊：一個是 <strong>Ip位址</strong> 另一個是 <strong>Port</strong>。</p>
<p>而一台主機可以擁有很多個 <strong>Ip位址</strong>，比如可以擁有網卡，數據機，WIFI卡，VPN連線跟藍芽連線…等。另外附帶一提，每台電腦都有一個介面是可以自己呼叫自己的網路介面，通常工程師稱他們為 <strong>localhost</strong>，術語則是 <strong>loopback</strong>。通常 loopback 是去 ping 這台電腦主機的虛擬網卡，一直一直 ping 自己的虛擬網卡，達到一個迴圈的概念，所以稱作 <strong>loopback</strong>。</p>
<p>那什麼是 DNS 呢。DNS 就好像一本電話簿一樣，如果你要打給某個人，但是你不知道他的電話，你可以打開電話簿來看他的電話號碼。用以上的例子來解釋。假如你要連上 google.com，那你的電腦會先到 DNS 去找 google.com 的 ip address，然後你自己電腦的 socket 就會得知 google.com 的 ip address，這樣就連上並且形成 Network connection。</p>
<h3 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h3><p>網路其實有時候不是很可靠的。當你發送一個新的<strong>請求</strong>出去的時候，封包有可能會透過 Wifi, 行動網路或者透過衛星系統。</p>
<p>所有網路傳遞在傳送和接收的時候都會被切割為很多小的封包，這些封包透過網路到達路由器之後再讓路由器決定這些封包要分配到哪。但是假如網路開始出現問題，封包越傳越多，路由器會開始超過他的負荷。這種很時常發生，所以路由器開始把一些來不及解析的封包丟掉。</p>
<p>此外也有可能是電腦自己把封包丟掉，當電腦超過負荷的時候，應用程式也有可能沒辦法這麼快速的讀取封包。或者有一些淺在的可能性當這些封包再傳輸的過程中被毀損了。</p>
<p>如果你剛開始接觸網路，當一切都很正常運行的時候，你會覺得這一切都是奇蹟。</p>
<h3 id="Bring-on-the-Protocols"><a href="#Bring-on-the-Protocols" class="headerlink" title="Bring on the Protocols"></a>Bring on the Protocols</h3><p>網路世界有一大堆的 Protocols (協議)，協議就好像是有一位女生答應我的告白，但是要成為她男朋友必須要有某些條件，比如我星期一，三，五要吃雞排。二，四，六要喝珍奶，必須要遵守這些條件才可以當她男朋友。那回到議題上，網路也是一樣，當我要建立 Network connection，那我首先要先遵守條件才可能建立連線，以下這些被列出來的 範例 (Protocols) 我們稱它為 <strong>應用層</strong></p>
<blockquote>
<p>HTTP, FTP, XMPP, POP, IMAP, SMTP, DHCP, DNS, VoIP, SIP, RTP, RTCP …etc</p>
</blockquote>
<p>但以上所有的 應用層 都是建立在另外一種 Protocols 上，我們稱它為 <strong>傳輸層</strong>。傳輸層是專門管理 網路方面的，但在這個 <strong>CocoaAsyncSocket專案</strong> 我們只會用到 <strong>UDP</strong> 跟 <strong>TCP</strong> 兩種。</p>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p><strong>User Datagram Protocol (UDP)</strong> 相對於 TCP 來說他比較簡單，UDP只能傳送比較小的封包，然後透過 socket 傳過去到指定目的地，然後…….沒了！就好像你出發到德國去，只買單程機票。而且也不保證順利到得了目的地。如果你傳送十個封包，然後也不保證他們是依照順序到達。但… UDP 缺點也是 UDP 的優點，比如今天你要打電話或者使用視訊功能，你不想要你的網路花時間在處理那些在中間不小心失去的封包，舉例來說今天你在觀看一位當紅主播的視屏，她表演了吃麵，過了一陣子表演了喝湯，如果這時候剛好吃麵的封包被解析回來了出現在喝湯的畫面，那不就變得很怪嗎？</p>
<p>UDP 還有另外一項優點，他並不用實作 <strong>Connection Handshake</strong>。Handshake 其實很複雜，但長話短說來解釋就是，互相確認一下雙方的個人資料。又舉了吃麵的例子，我今天到了麵店要點一碗陽春麵，我先批哩啪拉的問過老闆的身世，老闆幾歲啊？住哪啊？你有沒有女兒啊？先把一些該有的資訊都得到之後才說：我要一碗陽春麵，就不能直接說嗎？所以 UDP 不做 handshake 可以加速他來回通訊的時間，但缺點就是不安全。</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p><strong>Transmission Control Protocol (TCP)</strong>，這應該是我們最常用的協議了。當你上網，確認e-mail，或者聊天幾乎都在使用。</p>
<p>TCP 被設計專門給那些 <strong>較長的通訊</strong> 來使用，一開始 TCP 會先實作 <strong> Connection handshake</strong>，然後 封包便會開始傳遞。最棒的事情是 TCP 也被設計來專門連現在那些比較不穩定的網路上，他會做了很多 cool things for us 。比如你在傳送的途中失去了封包，程式會自己找出哪些封包失去並且重新傳送一次，而且保證你的訊息是一定會傳送到，而且也會依造順序傳送，不會像 UDP 一樣。</p>
<p>附帶一提，TCP 沒有傳送的上限。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>看完之後 什麼時候開始用 TCP 什麼時候該使用 UDP，也許留點空間給你思考。接著當然要推薦一下 CocoaAsyncSocket 拉，他們其實提供很多很棒的 Api 讓你不用去思考網路方面的問題，但網路還是處處充滿危機。</p>
<h3 id="更多參考"><a href="#更多參考" class="headerlink" title="更多參考"></a>更多參考</h3><p><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="external">Wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇轉自 CocoaAsyncSocket 的 &lt;a href=&quot;https://github.com/robbiehanson/CocoaAsyncSocket/wiki/Intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;， 介紹 Socket 的基本概要，並加上我自己個人的一些想法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="network" scheme="http://stephenchen.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Swift 3 Access Control Diagram</title>
    <link href="http://stephenchen.com/2016/12/21/Swift-3-access-control/"/>
    <id>http://stephenchen.com/2016/12/21/Swift-3-access-control/</id>
    <published>2016-12-21T10:28:39.000Z</published>
    <updated>2017-11-26T03:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>A diagram for open, public, private, fileprivate access level for swfit 3</p>
<a id="more"></a>
<p><img src="swift3-access-control.png" alt="swift3-access-control"></p>
<h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><ul>
<li>An open class is accessible and subclassable outside of the defining module. An open class member is accessible and overridable outside of the defining module.</li>
</ul>
<h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><ul>
<li>A public class is accessible but not subclassable outside of the defining module. A public class member is accessible but not overridable outside of the defining module.</li>
</ul>
<h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><ul>
<li>The private foo method is accessible only within the scope of the class A { … } definition. It is not even accessible from an extension to the type.</li>
</ul>
<h3 id="fileprivate"><a href="#fileprivate" class="headerlink" title="fileprivate"></a>fileprivate</h3><ul>
<li>The file-private bar method is accessible from the same source file.</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html" target="_blank" rel="external">reference</a><br><a href="http://stackoverflow.com/questions/39027250/what-is-a-good-example-to-differentiate-between-fileprivate-and-private-in-swift/41261058#41261058" target="_blank" rel="external">Stack overflow about private and fileprivate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A diagram for open, public, private, fileprivate access level for swfit 3&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift Code Conventions And Documenter</title>
    <link href="http://stephenchen.com/2016/12/20/Swift-Code-Conventions-Helper-And-Documentor/"/>
    <id>http://stephenchen.com/2016/12/20/Swift-Code-Conventions-Helper-And-Documentor/</id>
    <published>2016-12-20T02:29:31.000Z</published>
    <updated>2017-11-26T03:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>A way to get more time from Project Manager</p>
<a id="more"></a>
<p>Code Conventions and Documenter had been part of my big problems， until <a href="https://realm.io/" target="_blank" rel="external">Realm</a> released two great tools <a href="https://github.com/realm/SwiftLint" target="_blank" rel="external">SwiftLint</a> and <a href="https://github.com/realm/jazzy" target="_blank" rel="external">jazzy</a>。</p>
<h3 id="Jazzy"><a href="#Jazzy" class="headerlink" title="Jazzy"></a>Jazzy</h3><p>A command-line utility that generates documentation for Swift or Objective-C . I will provide very simple use here</p>
<h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[sudo] gem install jazzy</div></pre></td></tr></table></figure>
<h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><p>Remember to replace the text inside angle brackets , assume you have <a href="https://cocoapods.org/" target="_blank" rel="external">cocoapods</a> install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">jazzy \</div><div class="line">  --clean \</div><div class="line">  --xcodebuild-arguments -workspace,&lt;PROJECT&gt;.xcworkspace,-scheme,&lt;SCHEME&gt; \</div><div class="line">  --min-acl internal \</div><div class="line">  --author &lt;NAME&gt; \</div><div class="line">  --theme apple \</div><div class="line">  --author_url &lt;URL&gt; \</div><div class="line">  --github_url &lt;URL&gt; \</div><div class="line">  --module-version &lt;VERSION&gt; \</div><div class="line">  --output docs/index.html</div></pre></td></tr></table></figure>
<p>If you don’t have <a href="https://cocoapods.org/" target="_blank" rel="external">cocoapods</a> , change above code from  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--xcodebuild-arguments -workspace,&lt;PROJECT&gt;.xcworkspace,-scheme,&lt;SCHEME&gt; \</div></pre></td></tr></table></figure>
<p>To</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--xcodebuild-arguments -project,&lt;PROJECT&gt;.xcodeproj,-scheme,&lt;SCHEME&gt; \</div></pre></td></tr></table></figure>
<h5 id="Success"><a href="#Success" class="headerlink" title="Success"></a>Success</h5><p>♪♫ ♪♫ ♪♫ ♪♫  </p>
<p><img src="jazzy.gif" alt="jszzy"></p>
<p>Fro advance usage and more detail , please head to <a href="https://github.com/realm/jazzy" target="_blank" rel="external">jazzy</a> or type jazzy -h</p>
<h3 id="SwiftLint"><a href="#SwiftLint" class="headerlink" title="SwiftLint"></a>SwiftLint</h3><p>A tool to enforce Swift style and conventions. This is great for entire iOS team write a unified style code .</p>
<h5 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h5><p>Here use <a href="http://brew.sh/" target="_blank" rel="external">homebrew</a> to install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install swiftlint</div></pre></td></tr></table></figure>
<h5 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h5><p>Add below code into your xcode run script， then run the project。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> which swiftlint &gt;/dev/null; then</div><div class="line">    swiftlint</div><div class="line"><span class="keyword">else</span></div><div class="line">    echo <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></div><div class="line">fi</div></pre></td></tr></table></figure>
<p><img src="swiftlint.gif" alt="homebrew"></p>
<h5 id="Understanding"><a href="#Understanding" class="headerlink" title="Understanding"></a>Understanding</h5><p>You will probably see lots of warning and here I pick line 17 <strong>syntactic_sugar</strong> warning</p>
<p><img src="warning1.png" alt="warning picture"></p>
<p>First let us parse the warning . All the warning and error combine follow the syntax</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">description (rules_name)</div></pre></td></tr></table></figure>
<p>So this warning is call <strong>syntactic_sugar</strong> and <strong>“Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<int>“</int></strong> is the description of <strong>syntactic_sugar</strong> , you can fix it by what description suggested .</p>
<h5 id="Customize-your-own"><a href="#Customize-your-own" class="headerlink" title="Customize your own"></a>Customize your own</h5><p>First: You can see all the rules <a href="https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules" target="_blank" rel="external">here</a></p>
<p>Second: Add .swiftlint.yml under the project folder , then copy the code and fill each respectively .</p>
<script src="https://gist.github.com/5SMNOONMS5/f25219b5407eba652063f161eb712782.js"></script>

<p>run again</p>
<p><img src="warning2.png" alt="warning2 picture"></p>
<p>see? The warning disappear , I add <strong>syntactic_sugar</strong> to disabled_rules 。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rule identifiers to exclude from running</span></div><div class="line"><span class="attr">disabled_rules:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">syntactic_sugar</span></div><div class="line"><span class="bullet">  -</span> <span class="string">colon</span></div><div class="line"><span class="bullet">  -</span> <span class="string">todo</span></div><div class="line"><span class="bullet">  -</span> <span class="string">empty_count</span></div><div class="line"><span class="bullet">  -</span> <span class="string">trailing_whitespace</span></div></pre></td></tr></table></figure>
<h5 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h5><p>It is always necessary to have effective tools .</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A way to get more time from Project Manager&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://stephenchen.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Unrecognized Selector Sent To Instance Error</title>
    <link href="http://stephenchen.com/2016/12/16/Unrecognized-selector/"/>
    <id>http://stephenchen.com/2016/12/16/Unrecognized-selector/</id>
    <published>2016-12-16T03:37:09.000Z</published>
    <updated>2017-11-26T03:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Provide easy way to solve this horrible problem</p>
<a id="more"></a>
<p>While developing iOS application , you probably face this kind of error a lot</p>
<p><img src="error.png" alt="error picture"></p>
<p>The easiest way is create a exception breakpoint</p>
<p><img src="Step1.png" alt="Step1"></p>
<p><img src="Step2.png" alt="Step2"></p>
<p>Run and build , the breakpoint should stop at where caused this error .</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Provide easy way to solve this horrible problem&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://stephenchen.com/tags/Xcode/"/>
    
  </entry>
  
</feed>
